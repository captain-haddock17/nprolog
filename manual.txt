N-Prolog ユーザーズマニュアル


□ [Filename]
consult述語を用いてファイルからデータベースに読み込む。
-Filenameを使ったときはresoncult述語が使われる。
ファイルを複数指定することもできる。[Filename1,filename2,...]

□ abolish(name/Arity)
データバースから指定の名前をアリティーを持つすべての節を取り除く。

□ abort
現在のプログラムを中止する。プログラムの終了後インタープリタに戻る。
プログラムがコンパイルされたものなら、abortはそのゴールを再スタートさせる。

□ ansi_cuu(N)
カーソルをN行上げる。

□ ansi_cud(N)
カーソルをN行下げる。

□ ansi_cuf(N)
カーソルをN桁進める。

□ ansi_sub(N)
カーソルをN桁戻す。

□ ansi_cpr(Row,Col)
述語ansi_cprは、現在のカーソルの位置を知るために用いる。
引数Row、Colが代入されていない引数なら、現在のカーソル位置の座標を行と桁で
各引数にユニフィケーションする。
もし、代入されていれば、その数と現在位置の座標を比較する。

□ ansi_scp
述語ansi_scpは、現在のカーソル位置とその位置の文字の属性をセーブする。

□ ansi_rcp
述語ansi_rcpは、ansi_scpでセーブしたカーソル位置と属性をもとに戻す。

□ ansi_ed

□ ansi_el

□ ansi_sgr(G)
述語ansi_sgrは、グラフィック属性をセットする。Gは、整数でも整数のリストでもよい。
以下はあくまでも標準値で、機種によって異なる場合がある。

0 すべての属性をデフォルトに戻す。
1 強調
4 下線
5 ブリンク
7 リバース
8 シークレット
30 黒
31 赤
32 緑
33 黄色
34 青
35 マゼンダ
36 水色
37 白
40 背景色　黒
41 背景色　赤
42 背景色　緑
43 背景色　黄色
44 背景色　青
45 背景色　マゼンダ
46 背景色　水色
47 背景色　白



□ arg(N,Term,X)
Xを項のN番目の値にユニフィケーションする。
（引数は１から増加方向に番号付けられている。）

□ arg0(N,Term,X)
Xを項のN+1番目の引数の値にユニフィケーションする。
（引数は０から増加方向に番号付けられている。）

□ assert(Clause)
節を述語の終わりに追加する。

□ asserta(Clause)
節を述語の終わりに追加する。

□ assertz(Clause)
節を述語の終わりに追加する。

□ atom(X)
Xがアトムかどうかを調べる。

□ atom_string(Atom,String)
アトムをストリングに変換またはストリングをアトムに変換する。

□ atomic(X)
Xがアトムデータタイプかどうか調べる。

□ break
プログラムの実行を一時中断し、インタプリタプロンプトを表示する。
次のタイプによってプログラムは再開できる。

end_of_file

□ call(P)
インタープリトされたゴールPを呼び出す。

□ chdir(Path)
現在のディレクトリを変えるかまたは戻す。

□ clause(Head,Body)
HeadとBodyを節の頭部と本体にそれぞれユニフィケーションする。
Headは代入されなければならない。
例
?- assert((foo(X) :- write(X))).
yes
?- clause(foo(X),B).
X = v_1
B = (write(v_1));
no
?- 

□ close(Handle)
Handleで指定したファイルをクローズする。

□ current_op(Proc,Assoc,Op)
バックトラックしつつデータベース中に現在定義されている演算子定数を戻す。

□ current_predicate(Predicate)
バックトラックしつつデータベース中に現在定義されている述語を戻す。

□ date(date(Year,Month,Day))
年、月、日を戻す。

□ date_day(date(Year,Month,Day),WeekDay)
与えられた日付の曜日を０（日曜日）から６（土曜日）の間の数値で戻す。

□ dec(N,X)
数Nから１を引いて、値Xに与える。

□ delete(Filename)
指定のファイルを削除する。

□ display(Term)
前置記法で項を標準出力装置に書き出す。

□ edit(Filename)
Filenameで指定したファイルのエディトのため、インタープリタからエディタに切り換える。
エディタとしてnanoを呼び出す。nanoを終了するとファイルの内容はインタプリタに読み込まれる。

□ eq(X,Y)
XとYが同じデータオブジェクトであり、かつ同じアドレスにストアされているかを調べる。

□ expand_term(Term,Newterm)
DCG：限定節文法の項を等価なProlog項に変換する。

□ float(X)
Xが浮動小数点数かどうかを調べる。

□ flush
タイプアヘッドバッファ内のすべての文字を取り除く

□ functor(Struct,Name,Arity)
ストラクチャ名とアリティーを戻す。

□ gc
ガベージコレクションを起動する。

□ get(Char)
非印刷文字をスキップしながら、標準入力装置から次の文字を読み、
ASCII値をCharとユニフィケーションする。

□ get0(Char)
非印刷文字をスキップしながら、標準入力装置から次の文字を読み、
ASCII値をCharとユニフィケーションする。get0は非印刷文字をスキップしない。

□ get0_noecho(Char)
標準入力装置から次の文字を読み込み、ASCII値をCharにユニフィーケーションする。
get0_noechoは標準出力装置にその文字を表示しない。

□ halt
インタープリタから抜け出す。

□ integer(X)
Ｘが整数かどうかを調べる。

□ X is E 
Eを評価し、その値をXにユニフィケーションする

□ keysort(L1,L2)
リストL1を標準の順序に並べる。リストの要素はKey_Valueの形式でなければならない。
ソートされたリストはL2に戻される。だぶっていても１つにされない。

□ leash(Mode)
ポートを指定のModeに拘束する。

□ length(L,N)
リストの長さをNに戻す。

□ listing
標準出力装置に現在のデータベースの述語をすべて書き出す。

□ mkdir(Path)
新しいディレクトリを作る。

□ name(Atom,List)
リストをアトムに変換するか、アトムまたは整数をリストに変換する。

□ open(Handle,Filename,Access)
既存のファイルをオープンする。

Accessは次のいずれか
r read
w write
rw read and write
a append
ra read and append

□ rename(Filename,Newname)
ファイル名を変更する。

□ substring(InString,N,Length,OutString)
ストリングからサブストリングを抽出する。
Nは開始位置　１から始まる自然数
Lengthは抽出する文字列の長さ

□ system(P)
Pが組込述語かどうかを調べる。

□ time(time(Hours,Minutes,Seconds))
時、分、秒を返す。

時 [0-23]
分 [0-59]
秒 [0-61]

-----------DCG：限定節文法-------------------------------------------------
以下は中島秀之先生の「Prolog」（産業図書）にある例です。

A dog bites a postman.

この英文は構造をもっています。その構造は一定の文法規則に従っています。

文 -> 名詞句、動詞句
名詞句　->冠詞、名詞
冠詞　->a
名詞　->dog
名詞　->postman
動詞句　->動詞、名詞句
動詞　->bites

これを直接にPrologで記述することも可能ではあるのですが、もっと楽な方法があります。
それがDCGです。上記の規則をほぼそのままの形で記述することが可能です。

下記のコードをファイルに書き込み、Prologコードと同様にconsultで読み込ませます。

s --> np,vp.
np --> det,n.
det -->[a].
n -->[dog].
n -->[postman].
vp --> v,np.
v -->[bites].


なお、文法カテゴリーは省略形によっています。
文　sentence　s
名詞　noun　n
名詞句　noun　phrase　np
動詞　verb　v
限定詞　determiner　det
動詞句　verb　phrase

これをN-Prolog処理系で動かしてみましょう。
phraseという述語で文が正しいかどうかを確認することができます。



| ?- phrase(s,[a,dog,bites,a,postman]).
yes
| 



このようにリストで与えられた文が与えられた文構造になっていることが確かめられました。間違った文を与えたらどうでしょう？



| ?- phrase(s,[bites,a,dog,a,postman]).
no
|


偽が返っています。文法規則に反しています。


面白いことに文法規則にかなった文を生成させることもできます。



| ?- phrase(s,X).
X = [a,dog,bites,a,dog];
X = [a,dog,bites,a,postman];
X = [a,postman,bites,a,dog];
X = [a,postman,bites,a,postman];
no
| 


セミコロンを入力しバックトラックさせるといくつかの文がでてきました。
意味は変ですが文法規則には則っています。


----------コンパイラ--------------------------------------
まだ不完全ながらコンパイラも付属しています。起動時にコンパイラを読み込んでいます。

compile_file(filename)

このようにしてコンパイルするPrologコードの記述されたファイルをしてしてください。
C言語に変換し、さらにGCCでオブジェクトファイルにコンパイルします。

例えば9queensをコンパイルする場合には

compile_file('queens.pl').
とします。これによりqueens.oというファイルが生成されます。

['queens.o']. あるいは　consult('queens.o').　と入力すると読み込まれます。
あとは通常の述語と同様に使えます。

まだ末尾再帰最適化などの処理はしていません。インタープリタに比較して4割程度、高速になります。


Hello

My name is Kenichi Sasagawa.
I learned prolog at Arity/Prolog in the 1980s.
Now, I'm making a Prolog interpreter and compiler.
I want to make it compatible with the familiar Arity/Prolog.
Thank you.